{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Do dado ao dashboard: Documentando a constru\u00e7\u00e3o do Painel Fiscal do Estado de Minas Gerais","text":"<p>A documenta\u00e7\u00e3o completa sobre a metodologia, fontes de dados e processo de desenvolvimento do Painel de Transpar\u00eancia Fiscal de Minas Gerais. Este site detalha como transformamos dados fiscais complexos em um dashboard interativo e compreens\u00edvel, por meio de gr\u00e1ficos e visuais que podem ser utiizados para compor apresenta\u00e7\u00f5es diversas sobre a situa\u00e7\u00e3o fiscal do Estado de Minas Gerais.</p> <p>Acesse aqui o Painel Fiscal Interativo no Streamlit</p> <p></p>"},{"location":"comunidade/como_contribuir/","title":"Como contribuir com o Painel","text":"<p>Em constru\u00e7\u00e3o</p>"},{"location":"comunidade/como_replicar/","title":"Como replicar o painel","text":"<p>Em constru\u00e7\u00e3o</p>"},{"location":"dados/fontes_dados/","title":"Metodologia de Dados","text":"<p>Esta se\u00e7\u00e3o \u00e9 o cora\u00e7\u00e3o da documenta\u00e7\u00e3o, detalhando o percurso dos dados desde sua fonte original at\u00e9 se tornarem informa\u00e7\u00f5es validadas e prontas para an\u00e1lise.</p>"},{"location":"dados/fontes_dados/#fontes-de-dados","title":"Fontes de dados","text":"<p>Esta p\u00e1gina deve listar, de forma transparente, todos os conjuntos de dados utilizados no projeto. Para cada conjunto de dados, \u00e9 essencial fornecer o nome, uma breve descri\u00e7\u00e3o e um link direto para a p\u00e1gina correspondente no portal de dados abertos oficial. Isso n\u00e3o apenas confere credibilidade ao projeto, mas tamb\u00e9m capacita os usu\u00e1rios a realizar suas pr\u00f3prias verifica\u00e7\u00f5es e an\u00e1lises.</p> <p>EM CONSTRU\u00c7\u00c3O</p>"},{"location":"dados/padrao_frictionless/","title":"Frictionless e Datapackage","text":"<p>EM CONSTRU\u00c7\u00c3O</p>"},{"location":"dados/pipeline_etl/","title":"Pipeline e ETL","text":"<p>Em constru\u00e7\u00e3o</p>"},{"location":"dashboard/desenvolvendo_o_painel/","title":"Desenvolvendo o Painel","text":"<p>A escolha do Streamlit como framework foi estrat\u00e9gica, pois ele transforma scripts Python em aplica\u00e7\u00f5es web interativas com pouco c\u00f3digo. Isso permite que a equipe foque na an\u00e1lise e visualiza\u00e7\u00e3o dos dados, em vez de se preocupar com a complexidade do desenvolvimento web tradicional.</p> <p>Esta p\u00e1gina \u00e9 um guia para ajudar os desenvolvedores a entender, replicar e contribuir com esta ferramenta de transpar\u00eancia.</p> <p>O painel foi arquitetado como uma aplica\u00e7\u00e3o multi-p\u00e1gina para ser mais claro, organizado e f\u00e1cil de manter, seguindo o princ\u00edpio de \"separa\u00e7\u00e3o de responsabilidades\". O Streamlit facilita isso, pois a pr\u00f3pria estrutura de arquivos no diret\u00f3rio <code>/dashboard/</code> define a navega\u00e7\u00e3o do site.</p> <pre><code>dashboard/\n\u251c\u2500\u2500 pagina_inicial.py       # A p\u00e1gina principal (Home)\n\u2514\u2500\u2500 pages/\n    \u251c\u2500\u2500 1_resultado_fiscal.py\n    \u2514\u2500\u2500 2_resultado_previdenciario.py\n</code></pre> Clique aqui para ver a explica\u00e7\u00e3o para a l\u00f3gica da estrutura\u00e7\u00e3o das pastas e arquivos. <ul> <li>P\u00e1gina Principal: O script executado pelo comando <code>streamlit run</code> (neste caso, <code>Pagina_inicial.py</code>) \u00e9 automaticamente designado como a p\u00e1gina inicial ou \"Home\" da aplica\u00e7\u00e3o.</li> <li>P\u00e1ginas Adicionais: Qualquer arquivo Python (<code>.py</code>) colocado dentro de um subdiret\u00f3rio chamado <code>pages/</code> \u00e9 automaticamente detectado pelo Streamlit e adicionado como um item de navega\u00e7\u00e3o em uma barra lateral.</li> <li>Ordena\u00e7\u00e3o da Navega\u00e7\u00e3o: O Streamlit ordena as p\u00e1ginas na barra de navega\u00e7\u00e3o alfabeticamente pelo nome do arquivo. Para for\u00e7ar uma ordem espec\u00edfica, pode-se prefixar os nomes dos arquivos com n\u00fameros e um sublinhado (ex: 1_, 2_,...), como demonstrado na estrutura acima.</li> </ul> <p>Essa arquitetura oferece vantagens significativas. Cada p\u00e1gina se torna um m\u00f3dulo anal\u00edtico autocontido, focado em um aspecto espec\u00edfico dos dados fiscais (uma vis\u00e3o geral, a an\u00e1lise fiscal detalhada, o resultado previdenci\u00e1rio, etc.). Isso n\u00e3o apenas facilita a navega\u00e7\u00e3o para o usu\u00e1rio final, mas tamb\u00e9m simplifica o desenvolvimento e a manuten\u00e7\u00e3o. Para adicionar uma nova se\u00e7\u00e3o de an\u00e1lise ao painel, um desenvolvedor precisa apenas criar um novo arquivo Python no diret\u00f3rio <code>pages/</code>, sem a necessidade de modificar o c\u00f3digo das p\u00e1ginas existentes.</p>"},{"location":"dashboard/desenvolvendo_o_painel/#pagina-inicial","title":"Pagina Inicial","text":"<p>O script <code>pagina_inicial.py</code> serve como a landing page do Painel Fiscal. Sua principal fun\u00e7\u00e3o \u00e9 apresentar o projeto, fornecer contexto e exibir m\u00e9tricas de alto n\u00edvel que oferecem um panorama imediato da situa\u00e7\u00e3o fiscal. A an\u00e1lise a seguir detalha cada bloco de c\u00f3digo deste script.</p> <p>Bloco 1: Importa\u00e7\u00f5es e Configura\u00e7\u00e3o da P\u00e1gina</p> <p>O script come\u00e7a com a importa\u00e7\u00e3o das bibliotecas necess\u00e1rias e a configura\u00e7\u00e3o inicial da p\u00e1gina.</p> <pre><code># dashboard/pagina_inicial.py\n\nimport streamlit as st\nimport pandas as pd\nfrom pathlib import Path\n\n# --- CONFIGURA\u00c7\u00c3O DA P\u00c1GINA ---\n# Define o t\u00edtulo da p\u00e1gina, o \u00edcone e o layout.\n# layout=\"wide\" utiliza toda a largura da tela para o conte\u00fado.\nst.set_page_config(\n    page_title=\"Painel Fiscal MG | In\u00edcio\",\n    page_icon=\"\ud83d\udcca\",\n    layout=\"wide\"\n)\n</code></pre> Clique aqui para ver a explica\u00e7\u00e3o para cada linha de c\u00f3digo <ul> <li><code>import streamlit as st</code>: Importa a biblioteca principal do Streamlit, convencionalmente com o alias st.</li> <li><code>import pandas as pd</code>: Importa a biblioteca Pandas para manipula\u00e7\u00e3o de dados, com o alias pd.</li> <li><code>from pathlib import Path</code>: Importa a classe Path para uma manipula\u00e7\u00e3o mais robusta e independente de sistema operacional dos caminhos de arquivo.</li> <li><code>st.set_page_config(...)</code>: Esta \u00e9 a primeira chamada do Streamlit no script e deve ser executada apenas uma vez. Ela configura metadados e o layout da p\u00e1gina.</li> <li><code>page_title</code>: Define o t\u00edtulo que aparece na aba do navegador.</li> <li><code>page_icon</code>: Define o favicon que aparece na aba do navegador. Pode ser um emoji ou a URL de uma imagem.</li> <li><code>layout=\"wide\"</code>: Configura a p\u00e1gina para usar a largura total do navegador, o que \u00e9 ideal para dashboards com m\u00faltiplos gr\u00e1ficos e tabelas.</li> </ul> <p>Bloco 2: Carregamento e Cache de Dados</p> <p>Para garantir a performance da aplica\u00e7\u00e3o, o carregamento de dados \u00e9 encapsulado em uma fun\u00e7\u00e3o e otimizado com um decorador de cache do Streamlit.</p> <pre><code># --- FUN\u00c7\u00d5ES DE APOIO ---\n\n@st.cache_data\ndef carregar_dados():\n    \"\"\"\n    Carrega os dados fiscais processados a partir de um arquivo CSV.\n    Utiliza o cache do Streamlit para evitar recarregamentos desnecess\u00e1rios.\n    \"\"\"\n    caminho_dados = Path(__file__).parent.parent / \"data\" / \"dados_fiscais_processados.csv\"\n    df = pd.read_csv(caminho_dados)\n    # Converte colunas de data para o tipo datetime para manipula\u00e7\u00e3o correta\n    for col in df.columns:\n        if 'data' in col:\n            df[col] = pd.to_datetime(df[col])\n    return df\n\n# Carrega os dados na inicializa\u00e7\u00e3o do script\ndf = carregar_dados()\n</code></pre> Clique aqui para ver a explica\u00e7\u00e3o para cada linha de c\u00f3digo <ul> <li><code>@st.cache_data</code>: Este decorador \u00e9 um dos recursos mais poderosos do Streamlit para otimiza\u00e7\u00e3o de performance. Quando a fun\u00e7\u00e3o carregar_dados \u00e9 chamada pela primeira vez, ela executa normalmente (lendo o CSV do disco) e o resultado (o DataFrame) \u00e9 armazenado na mem\u00f3ria cache. Em todas as chamadas subsequentes (por exemplo, quando um usu\u00e1rio interage com um widget em outra p\u00e1gina), o Streamlit verifica se o c\u00f3digo da fun\u00e7\u00e3o ou seus par\u00e2metros de entrada mudaram. Se n\u00e3o mudaram, ele retorna instantaneamente o resultado do cache, em vez de ler o arquivo do disco novamente. Isso torna a navega\u00e7\u00e3o entre p\u00e1ginas e as intera\u00e7\u00f5es subsequentes extremamente r\u00e1pidas.   </li> <li><code>caminho_dados</code> = Path(...): O uso de pathlib e file cria um caminho relativo robusto para o arquivo de dados. Path(file).parent.parent navega dois n\u00edveis acima do diret\u00f3rio do script atual (de dashboard/ para a raiz do projeto), garantindo que o caminho para data/dados_fiscais_processados.csv funcione independentemente de onde o script for executado.</li> <li><code>pd.to_datetime(...)</code>: Uma etapa crucial de pr\u00e9-processamento para garantir que as colunas de data sejam tratadas como objetos de data/hora, permitindo filtros e agrega\u00e7\u00f5es baseados em tempo.</li> </ul> <p>Bloco 3: Renderiza\u00e7\u00e3o do Conte\u00fado da P\u00e1gina</p> <p>Esta se\u00e7\u00e3o utiliza as fun\u00e7\u00f5es do Streamlit para renderizar o t\u00edtulo, textos descritivos e outros elementos visuais que comp\u00f5em o corpo da p\u00e1gina inicial.</p> <pre><code># --- LAYOUT DA P\u00c1GINA INICIAL ---\n\nst.title(\"Painel de Transpar\u00eancia Fiscal de Minas Gerais\")\nst.markdown(\"---\") # Cria uma linha divis\u00f3ria horizontal\n\nst.markdown(\n    \"\"\"\n    Bem-vindo(a) ao portal de documenta\u00e7\u00e3o e an\u00e1lise do Painel de Transpar\u00eancia Fiscal de Minas Gerais.\n    Este projeto visa transformar dados fiscais complexos em um dashboard interativo e compreens\u00edvel,\n    permitindo que qualquer cidad\u00e3o explore e entenda como os recursos p\u00fablicos s\u00e3o gerenciados.\n\n    **Navegue pelas se\u00e7\u00f5es na barra lateral para explorar as an\u00e1lises detalhadas.**\n    \"\"\"\n)\nst.markdown(\"---\")\n</code></pre> Clique aqui para ver a explica\u00e7\u00e3o para cada linha de c\u00f3digo <ul> <li><code>st.title(...)</code>: Exibe o texto como o t\u00edtulo principal da p\u00e1gina.</li> <li><code>st.markdown(...)</code>: Renderiza texto usando a sintaxe Markdown. Isso permite formata\u00e7\u00e3o rica como negrito (texto), it\u00e1lico, listas e, como visto aqui, a cria\u00e7\u00e3o de uma linha divis\u00f3ria horizontal (---)</li> </ul> <p>Bloco 4: Exibi\u00e7\u00e3o de M\u00e9tricas Chave (KPIs)</p> <p>Esta se\u00e7\u00e3o utiliza as fun\u00e7\u00f5es do Streamlit para renderizar o t\u00edtulo, textos descritivos e outros elementos visuais que comp\u00f5em o corpo da p\u00e1gina inicial.</p> <pre><code># --- EXIBI\u00c7\u00c3O DE KPIs ---\n\nst.header(\"Vis\u00e3o Geral dos Dados\")\n\n# Calcula as m\u00e9tricas a partir do DataFrame completo\nvalor_total_empenhado = df['valor_empenhado'].sum()\nnum_orgaos = df['orgao_responsavel'].nunique()\ndata_inicio = df['data_emissao'].min().strftime('%d/%m/%Y')\ndata_fim = df['data_emissao'].max().strftime('%d/%m/%Y')\n\n# Cria um layout de colunas para organizar os KPIs\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n    st.metric(\n        label=\"Valor Total Empenhado\",\n        value=f\"R$ {valor_total_empenhado:,.2f}\"\n    )\n\nwith col2:\n    st.metric(\n        label=\"\u00d3rg\u00e3os Analisados\",\n        value=num_orgaos\n    )\n\nwith col3:\n    st.metric(\n        label=\"Per\u00edodo de An\u00e1lise\",\n        value=f\"{data_inicio} a {data_fim}\"\n    )\n</code></pre> Clique aqui para ver a explica\u00e7\u00e3o para cada linha de c\u00f3digo <ul> <li><code>st.header(...)</code>: Renderiza um cabe\u00e7alho de se\u00e7\u00e3o.</li> <li>C\u00e1lculo das M\u00e9tricas: A l\u00f3gica do Pandas \u00e9 usada para agregar os dados do DataFrame e calcular os valores dos KPIs. <code>df['valor_empenhado'].sum()</code> soma todos os valores na coluna, e <code>df['orgao_responsavel'].nunique()</code> conta o n\u00famero de \u00f3rg\u00e3os \u00fanicos.</li> <li><code>st.columns(3)</code>: Cria um layout de grade com tr\u00eas colunas de largura igual. O c\u00f3digo subsequente dentro dos blocos <code>with col1:, with col2:</code>, etc., ser\u00e1 renderizado dentro da coluna correspondente. Esta \u00e9 a maneira padr\u00e3o do Streamlit de criar layouts de dashboard mais complexos.   </li> <li><code>st.metric(...)</code>: Um componente de UI especializado para exibir KPIs. Ele renderiza um <code>label</code> (t\u00edtulo da m\u00e9trica) e um value (o valor da m\u00e9trica) em um formato visualmente destacado. A formata\u00e7\u00e3o do valor (ex: <code>f\"R$ {valor_total_empenhado:,.2f}\"</code>) \u00e9 feita usando f-strings do Python para garantir a exibi\u00e7\u00e3o correta de moeda e separadores de milhar.</li> </ul>"},{"location":"dashboard/desenvolvendo_painel/","title":"Desenvolvendo o Painel","text":"<p>A escolha do Streamlit como framework foi estrat\u00e9gica, pois ele transforma scripts Python em aplica\u00e7\u00f5es web interativas com pouco c\u00f3digo. Isso permite que a equipe foque na an\u00e1lise e visualiza\u00e7\u00e3o dos dados, em vez de se preocupar com a complexidade do desenvolvimento web tradicional.</p> <p>Esta p\u00e1gina \u00e9 um guia para ajudar os desenvolvedores a entender, replicar e contribuir com esta ferramenta de transpar\u00eancia.</p> <p>O painel foi arquitetado como uma aplica\u00e7\u00e3o multi-p\u00e1gina para ser mais claro, organizado e f\u00e1cil de manter, seguindo o princ\u00edpio de \"separa\u00e7\u00e3o de responsabilidades\". O Streamlit facilita isso, pois a pr\u00f3pria estrutura de arquivos no diret\u00f3rio <code>/dashboard/</code> define a navega\u00e7\u00e3o do site.</p> <pre><code>dashboard/\n\u251c\u2500\u2500 Pagina_inicial.py       \n\u251c\u2500\u2500 data_loader.py       \n\u251c\u2500\u2500 utils.py       \n\u2514\u2500\u2500 pages/\n    \u251c\u2500\u2500 1_resultado_fiscal.py\n    \u2514\u2500\u2500 2_resultado_previdenciario.py\n</code></pre> Clique aqui para ver a explica\u00e7\u00e3o para a l\u00f3gica da estrutura\u00e7\u00e3o das pastas e arquivos. <ul> <li>P\u00e1gina Principal: O script executado pelo comando <code>streamlit run</code> (neste caso, <code>Pagina_inicial.py</code>) \u00e9 automaticamente designado como a p\u00e1gina inicial ou \"Home\" da aplica\u00e7\u00e3o.</li> <li>P\u00e1ginas Adicionais: Qualquer arquivo Python (<code>.py</code>) colocado dentro de um subdiret\u00f3rio chamado <code>pages/</code> \u00e9 automaticamente detectado pelo Streamlit e adicionado como um item de navega\u00e7\u00e3o em uma barra lateral.</li> <li>Camada de acesso e cache de dados: O acesso, limpeza e transforma\u00e7\u00e3o dos dados est\u00e3o confinados a <code>data_loader.py</code>. </li> <li>Fun\u00e7\u00f5es Utilit\u00e1rias - As fun\u00e7\u00f5es de formata\u00e7\u00e3o de moeda e estiliza\u00e7\u00e3o de tabelas residem em <code>utils.py</code>.</li> <li>Ordena\u00e7\u00e3o da Navega\u00e7\u00e3o: O Streamlit ordena as p\u00e1ginas na barra de navega\u00e7\u00e3o alfabeticamente pelo nome do arquivo. Para for\u00e7ar uma ordem espec\u00edfica, pode-se prefixar os nomes dos arquivos com n\u00fameros e um sublinhado (ex: 1_, 2_,...), como demonstrado na estrutura acima.</li> </ul> <p>Essa arquitetura oferece vantagens significativas. Cada p\u00e1gina se torna um m\u00f3dulo anal\u00edtico autocontido, focado em um aspecto espec\u00edfico dos dados fiscais (uma vis\u00e3o geral, a an\u00e1lise fiscal detalhada, o resultado previdenci\u00e1rio, etc.).  Isso n\u00e3o apenas facilita a navega\u00e7\u00e3o para o usu\u00e1rio final, mas tamb\u00e9m simplifica o desenvolvimento e a manuten\u00e7\u00e3o. Para adicionar uma nova se\u00e7\u00e3o de an\u00e1lise ao painel, um desenvolvedor precisa apenas criar um novo arquivo Python no diret\u00f3rio <code>pages/</code>, sem a necessidade de modificar o c\u00f3digo das p\u00e1ginas existentes.</p> <p>A arquitetura do dashboard assenta em tr\u00eas pilares essenciais, projetados para garantir robustez, escalabilidade e facilidade de manuten\u00e7\u00e3o a longo prazo:</p> <ul> <li>Separa\u00e7\u00e3o de Responsabilidades: A l\u00f3gica da aplica\u00e7\u00e3o \u00e9 rigorosamente dividida. Os scripts <code>data_loader.py</code> e <code>utils.py</code> atuam como fornecedores, exportando funcionalidades (carregamento de dados, formata\u00e7\u00e3o) para serem consumidas pelos scripts em <code>dashboard/pages/</code>. Esta depend\u00eancia unidirecional \u00e9 uma caracter\u00edstica de uma arquitetura em camadas robusta, que isola a l\u00f3gica de neg\u00f3cio da interface do utilizador, simplificando a manuten\u00e7\u00e3o.</li> <li>Modularidade e Escalabilidade: O projeto aproveita a estrutura nativa de aplica\u00e7\u00f5es multip\u00e1gina do Streamlit. O diret\u00f3rio <code>dashboard/pages/</code> \u00e9 o epicentro da escalabilidade. A adi\u00e7\u00e3o de um novo indicador \u00e9 t\u00e3o simples quanto criar um novo ficheiro Python nesse diret\u00f3rio, seguindo o padr\u00e3o estabelecido, como <code>3_Novo_Indicador.py</code>. Este modelo acomoda o crescimento futuro de forma eficiente.</li> <li>N\u00e3o se Repita: Toda a l\u00f3gica que pode ser partilhada \u00e9 centralizada. O carregamento de dados e a gest\u00e3o de cache est\u00e3o em <code>data_loader.py</code>, enquanto a formata\u00e7\u00e3o de n\u00fameros e a estiliza\u00e7\u00e3o de tabelas s\u00e3o geridas por <code>utils.py</code>. Este princ\u00edpio minimiza a duplica\u00e7\u00e3o de c\u00f3digo, garantindo consist\u00eancia e reduzindo o esfor\u00e7o de manuten\u00e7\u00e3o.</li> </ul>"},{"location":"dashboard/scripts_centrais/","title":"A Arquitetura Fundamental: Scripts Centrais da Aplica\u00e7\u00e3o","text":"<p>Esta se\u00e7\u00e3o aborda os scripts que s\u00e3o a espinha dorsal do projeto. Eles lidam com a inicializa\u00e7\u00e3o da aplica\u00e7\u00e3o, o carregamento de dados e as fun\u00e7\u00f5es utilit\u00e1rias compartilhadas, garantindo que o dashboard funcione de maneira coesa e eficiente.</p>"},{"location":"dashboard/scripts_centrais/#1-pagina-inicial-dashboardpagina_inicialpy","title":"1. P\u00e1gina Inicial (dashboard/Pagina_Inicial.py)","text":"<p>Este script \u00e9 o ponto de entrada da aplica\u00e7\u00e3o, respons\u00e1vel pela configura\u00e7\u00e3o global e pela apresenta\u00e7\u00e3o da p\u00e1gina de boas-vindas.</p> <p></p> <pre><code># dashboard/Pagina_Inicial.py\nimport streamlit as st\n\n# --- Configura\u00e7\u00e3o da P\u00e1gina (APENAS AQUI) ---\nst.set_page_config(\n    page_title=\"Painel Fiscal - In\u00edcio\",\n    page_icon=\"\ud83d\udcca\",\n    layout=\"wide\"\n)\n\n# --- Conte\u00fado da P\u00e1gina ---\nst.title(\"Painel de An\u00e1lise Fiscal\")\nst.write(\"Bem-vindo(a) ao painel de an\u00e1lise de dados fiscais.\")\nst.info(\"\u2b05\ufe0f Utilize o menu na barra lateral para navegar entre as diferentes an\u00e1lises.\")\n\nst.header(\"Sobre\")\nst.write(\"\"\"\nEste painel foi criado para consolidar e visualizar os principais indicadores:\n- **Resultado Fiscal:** An\u00e1lise da Receita vs. Despesa Empenhada.\n- **Resultado Previdenci\u00e1rio:** An\u00e1lise do resultado previdenci\u00e1rio ao longo dos anos.\n\"\"\")\n</code></pre> Clique aqui para ver a explica\u00e7\u00e3o para cada linha de c\u00f3digo <ul> <li><code>import streamlit as st</code>: Importa a biblioteca principal do Streamlit, que \u00e9 a base para a cria\u00e7\u00e3o de toda a interface do usu\u00e1rio. O alias st \u00e9 uma conven\u00e7\u00e3o padr\u00e3o.</li> <li><code>st.set_page_config(...)</code>: Comando executado uma \u00fanica vez para definir configura\u00e7\u00f5es globais da aplica\u00e7\u00e3o.</li> <li><code>page_title</code>: Define o texto que aparece no separador do navegador.</li> <li><code>page_icon=\"\ud83d\udcca\"</code>: Define o \u00edcone (favicon) do separador, utilizando um emoji.</li> <li><code>layout=\"wide\"</code>: Configura a p\u00e1gina para utilizar toda a largura do ecr\u00e3, ideal para dashboards.</li> <li><code>st.title(...)</code> e <code>st.header(...)</code>: Renderizam t\u00edtulos de diferentes n\u00edveis hier\u00e1rquicos.</li> <li><code>st.write(...)</code>: Exibe texto simples ou, como no segundo uso, um bloco de texto formatado com Markdown (a lista com * \u00e9 renderizada como uma lista com marcadores).</li> <li><code>st.info(...)</code>: Apresenta uma mensagem informativa numa caixa de destaque, guiando o utilizador a usar a barra de navega\u00e7\u00e3o.</li> </ul>"},{"location":"dashboard/scripts_centrais/#2-camada-de-acesso-e-cache-de-dados-dashboardloadpy","title":"2. Camada de acesso e cache de dados (dashboard/load.py)","text":"<p>Este m\u00f3dulo \u00e9 o cora\u00e7\u00e3o da l\u00f3gica de dados. Ele centraliza o carregamento, a limpeza, a transforma\u00e7\u00e3o e a fus\u00e3o dos dados brutos, al\u00e9m de implementar o cache para otimiza\u00e7\u00e3o de desempenho.</p> <pre><code># Este arquivo centraliza todo o carregamento e manipula\u00e7\u00e3o inicial de dados. Usar o @st.cache_data aqui \u00e9 perfeito.\n# dashboard/data_loader.py\nimport streamlit as st\nimport pandas as pd\nimport os\nfrom utils import DATA_PATH  # Importa a constante do nosso outro m\u00f3dulo\n\n\n@st.cache_data\ndef carregar_dados_fiscal():\n    \"\"\"Carrega e prepara os dados do Resultado Fiscal.\"\"\"\n    path_receita = os.path.join(DATA_PATH, \"receita.csv\")\n    path_despesa = os.path.join(DATA_PATH, \"despesa.csv\")\n\n    try:\n        # --- L\u00f3gica de limpeza do 'receita.csv' ---\n        def clean_numeric_brl(value_str):\n            if isinstance(value_str, str):\n                value_str = value_str.strip('\"').replace(\n                    '.', '').replace(',', '.')\n                return pd.to_numeric(value_str, errors='coerce')\n            return pd.NaT\n\n        df_receita_raw = pd.read_csv(\n            path_receita, encoding='utf-8', header=None, skiprows=1)\n        split_data = df_receita_raw.str.split(',', n=1, expand=True)\n        split_rest = split_data.[1]str.strip('\"').str.split('\",\"', expand=True)\n\n        df_receita = pd.DataFrame()\n        df_receita['Ano de Exerc\u00edcio'] = pd.to_numeric(split_data)\n        df_receita['Valor Efetivado Ajustado'] = split_rest.[1]apply(\n            clean_numeric_brl)\n\n        # --- Carregar Despesa ---\n        df_despesa = pd.read_csv(\n            path_despesa, encoding='latin1', sep=';', decimal=',', thousands='.')\n\n        # --- Merge e C\u00e1lculo ---\n        df = pd.merge(\n            df_receita[['Ano de Exerc\u00edcio', 'Valor Efetivado Ajustado']],\n            df_despesa],\n            on='Ano de Exerc\u00edcio', how='inner'\n        )\n        df.rename(columns={\n            'Valor Efetivado Ajustado': 'Receita Fiscal',\n            'Valor Despesa Empenhada': 'Despesa Fiscal'\n        }, inplace=True)\n\n        df = df - df\n\n        df['Ano de Exerc\u00edcio'] = df['Ano de Exerc\u00edcio'].astype(int)\n\n        return df\n\n    except FileNotFoundError as e:\n        st.error(f\"Arquivo n\u00e3o encontrado: {e.filename}.\")\n        return None\n    except Exception as e:\n        st.error(f\"Ocorreu um erro ao processar os arquivos fiscais: {e}\")\n        return None\n\n\n@st.cache_data\ndef carregar_dados_previdenciario():\n    \"\"\"Carrega, limpa e transforma os dados do resultado previdenci\u00e1rio.\"\"\"\n    caminho_arquivo = os.path.join(DATA_PATH, \"resultado_previdenciario.csv\")\n    try:\n        df = pd.read_csv(\n            caminho_arquivo,\n            encoding='latin1', sep=';', decimal=',', thousands='.'\n        )\n        df = df.dropna(how='all')\n\n        if df.empty:\n            st.error(\"O arquivo CSV previdenci\u00e1rio est\u00e1 vazio.\")\n            return pd.DataFrame(columns=)\n\n        df_melted = df.melt(\n            id_vars=, var_name='Ano', value_name='Valor')\n\n        try:\n            df_melted['Ano'] = df_melted['Ano'].astype(int)\n        except ValueError as e:\n            st.error(\n                f\"Erro ao converter a coluna 'Ano' para n\u00famero: {e}. Verifique o cabe\u00e7alho do CSV.\")\n            return pd.DataFrame(columns=)\n\n        df_melted['Valor'] = pd.to_numeric(df_melted['Valor'], errors='coerce')\n        df_melted = df_melted.dropna(subset=['Valor'])\n\n        return df_melted\n\n    except FileNotFoundError as e:\n        st.error(f\"Arquivo n\u00e3o encontrado: {e.filename}.\")\n        return pd.DataFrame(columns=)\n    except Exception as e:\n        st.error(\n            f\"Erro ao carregar ou processar o arquivo CSV previdenci\u00e1rio: {e}\")\n        return pd.DataFrame(columns=)\n</code></pre> Clique aqui para ver a explica\u00e7\u00e3o para cada linha de c\u00f3digo <ul> <li><code>@st.cache_data</code>: Este decorador instrui o Streamlit a armazenar o resultado da fun\u00e7\u00e3o em mem\u00f3ria. Em execu\u00e7\u00f5es subsequentes do script (causadas por intera\u00e7\u00f5es do utilizador), se a fun\u00e7\u00e3o for chamada novamente, o resultado em cache \u00e9 retornado instantaneamente, evitando a releitura e o reprocessamento lento dos ficheiros, o que \u00e9 crucial para a performance.</li> <li><code>carregar_dados_fiscal()</code>: Esta fun\u00e7\u00e3o demonstra uma pipeline de ETL (Extra\u00e7\u00e3o, Transforma\u00e7\u00e3o, Carga) robusta: </li> <li>(a) Extra\u00e7\u00e3o: L\u00ea dois CSVs distintos, receita.csv e despesa.csv, utilizando caminhos constru\u00eddos a partir da constante DATA_PATH;</li> <li>(b) Transforma\u00e7\u00e3o: Executa uma limpeza complexa em receita.csv, que envolve dividir colunas concatenadas e aplicar a fun\u00e7\u00e3o clean_numeric_brl para converter texto formatado como moeda brasileira em n\u00fameros. Em seguida, une (merge) os dados de receita e despesa e calcula a coluna Resultado Fiscal; </li> <li>(c) Tratamento de Erros: O bloco try...except captura erros comuns, como FileNotFoundError, e exibe mensagens amig\u00e1veis ao utilizador com st.error.</li> <li><code>carregar_dados_previdenciario()</code>: Esta fun\u00e7\u00e3o tamb\u00e9m realiza um processo de ETL:</li> <li>(a) Transforma\u00e7\u00e3o: A opera\u00e7\u00e3o mais importante aqui \u00e9 df.melt(), que transforma o DataFrame de um formato \"largo\" (anos como colunas) para um formato \"longo\" (uma coluna para 'Ano' e outra para 'Valor'), que \u00e9 o formato ideal para a maioria das bibliotecas de visualiza\u00e7\u00e3o, incluindo o Altair;</li> <li>(b) Valida\u00e7\u00e3o e Limpeza: O c\u00f3digo verifica se o DataFrame est\u00e1 vazio, remove linhas nulas e converte os tipos de dados, tratando potenciais erros durante a convers\u00e3o.</li> </ul>"},{"location":"dashboard/scripts_centrais/#3-funcoes-utilitarias-dashboardutilspy","title":"3. Fun\u00e7\u00f5es Utilit\u00e1rias (dashboard/utils.py)","text":"<p>Este m\u00f3dulo funciona como uma \"caixa de ferramentas\", contendo constantes e fun\u00e7\u00f5es reutiliz\u00e1veis para formata\u00e7\u00e3o e estiliza\u00e7\u00e3o, garantindo consist\u00eancia visual em toda a aplica\u00e7\u00e3o.</p> <pre><code># Este arquivo conter\u00e1 todas as suas fun\u00e7\u00f5es \"auxiliares\" de formata\u00e7\u00e3o e estilo.\n\n# dashboard/utils.py\nimport pandas as pd\nimport os\n\n# --- Constantes ---\n# Define o caminho base para os dados\n# \"..\" significa \"subir um n\u00edvel\" (da pasta 'dashboard' para 'painel_fiscal')\n# E ent\u00e3o ele entra em 'data-raw'\nDATA_PATH = os.path.join(\"..\", \"data-raw\")\n\n\n# --- Fun\u00e7\u00f5es de Formata\u00e7\u00e3o de Moeda ---\n\ndef formatar_brl(valor):\n    \"\"\"Formata um n\u00famero para o padr\u00e3o BRL (R$ 1.234,56).\"\"\"\n    if pd.isna(valor):\n        return \"N/A\"\n    formatado = f\"{valor:,.2f}\"\n    # Troca , por. e. por ,\n    formatado_br = formatado.replace(\",\", \"temp\").replace(\n        \".\", \",\").replace(\"temp\", \".\")\n    return f\"R$ {formatado_br}\"\n\n\ndef format_brl_bilhoes(valor):\n    \"\"\"Formata um n\u00famero em bilh\u00f5es para o padr\u00e3o BRL (R$ 1,23).\"\"\"\n    s = f\"{valor:.2f}\"  # Formata com 2 casas decimais\n    s = s.replace(\".\", \",\")   # Troca ponto por v\u00edrgula\n    return f\"R$ {s}\"\n\n\n# --- Fun\u00e7\u00f5es de Estilo (para DataFrames) ---\n\ndef style_negativo(valor, cor_positivo='black', cor_negativo='red'):\n    \"\"\"Aplica cor vermelha se o valor for negativo.\"\"\"\n    if pd.isna(valor):\n        return 'color: gray'\n    return f'color: {cor_negativo}' if valor &lt; 0 else f'color: {cor_positivo}'\n\n\ndef style_resultado_fiscal(valor):\n    \"\"\"Aplica azul para positivo e vermelho para negativo.\"\"\"\n    if pd.isna(valor):\n        return 'color: gray'\n    if valor &lt; 0:\n        return 'color: red'\n    elif valor &gt; 0:\n        return 'color: blue'\n    return 'color: black'\n</code></pre> Clique aqui para ver a explica\u00e7\u00e3o para cada linha de c\u00f3digo <ul> <li><code>DATA_PATH</code>: Define uma constante para o caminho do diret\u00f3rio de dados. O uso de os.path.join(\"..\", \"data-raw\") cria um caminho relativo robusto que funciona independentemente do sistema operativo, tornando o projeto mais port\u00e1vel.</li> <li>Fun\u00e7\u00f5es de Formata\u00e7\u00e3o: <code>formatar_brl</code> e <code>format_brl_bilhoes</code> encapsulam a l\u00f3gica para converter valores num\u00e9ricos em strings formatadas como moeda brasileira. A centraliza\u00e7\u00e3o destas fun\u00e7\u00f5es garante que todos os valores monet\u00e1rios exibidos na aplica\u00e7\u00e3o tenham uma apar\u00eancia consistente.</li> <li>Fun\u00e7\u00f5es de Estilo: <code>style_negativo</code> e <code>style_resultado_fiscal</code> s\u00e3o projetadas para funcionar com o objeto Styler do Pandas (<code>df.style</code>). Elas n\u00e3o retornam um valor formatado, mas sim uma string de estilo CSS (ex: 'color: red'). Isto permite a aplica\u00e7\u00e3o de formata\u00e7\u00e3o condicional a c\u00e9lulas de um DataFrame, como colorir valores negativos de vermelho.</li> </ul>"},{"location":"dashboard/scripts_indicadores/","title":"Scripts das P\u00e1ginas de Indicadores","text":"<p>Esta se\u00e7\u00e3o detalha os scripts localizados na pasta dashboard/pages/. Cada arquivo corresponde a uma p\u00e1gina espec\u00edfica no dashboard e utiliza os scripts gerais para buscar dados e construir as visualiza\u00e7\u00f5es.</p>"},{"location":"dashboard/scripts_indicadores/#1-resultado-fiscal-dashboardpagesresultado_fiscalpy","title":"1. Resultado Fiscal (dashboard/pages/resultado_fiscal.py)","text":"<p>Este script constr\u00f3i a p\u00e1gina do indicador de resultado fiscal, consumindo os servi\u00e7os de data_loader e utils para criar uma visualiza\u00e7\u00e3o interativa e uma tabela detalhada.</p> <p></p> <p></p> <pre><code># dashboard/pages/1_Resultado_Fiscal.py\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\n\n# Importa as fun\u00e7\u00f5es \"gerais\" que criamos\nfrom data_loader import carregar_dados_fiscal\nfrom utils import formatar_brl, style_resultado_fiscal, format_brl_bilhoes\n\n# --- T\u00edtulo da P\u00e1gina ---\nst.title(\"Resultado Fiscal\")\n\n# --- Carregar dados (agora vem do m\u00f3dulo) ---\ndf_completo = carregar_dados_fiscal()\n\nif df_completo is None or df_completo.empty:\n    st.error(\"N\u00e3o foi poss\u00edvel carregar os dados. Verifique os logs no console.\")\n    st.stop()\n\n\n# --- L\u00f3gica da P\u00e1gina (Filtros e Gr\u00e1ficos) ---\ntry:\n    ano_min = int(df_completo['Ano de Exerc\u00edcio'].min())\n    ano_max = int(df_completo['Ano de Exerc\u00edcio'].max())\n\n    anos_selecionados = st.slider(\n        \"Escolha o intervalo de anos para an\u00e1lise:\",\n        min_value=ano_min,\n        max_value=ano_max,\n        value=(2014, ano_max),  # Valor padr\u00e3o\n        step=1,\n        key='slider_fiscal'\n    )\nexcept Exception as e:\n    st.error(f\"Erro ao configurar o filtro de anos: {e}\")\n    st.stop()\n\n\n# Filtra os dados pelo per\u00edodo selecionado\ndf_plot = df_completo[\n    (df_completo['Ano de Exerc\u00edcio'] &gt;= anos_selecionados) &amp;\n    (df_completo['Ano de Exerc\u00edcio'] &lt;= anos_selecionados[1])\n].copy()\n\nif df_plot.empty:\n    st.warning(\"Nenhum dado dispon\u00edvel para o per\u00edodo selecionado.\")\n    st.stop()\n\n# --- Prepara\u00e7\u00e3o dos dados para o gr\u00e1fico ---\ndf_plot = df_plot / 1_000_000\ndf_plot['label_offset'] = df_plot.apply(\n    lambda x: -15 if x &gt; 0 else 15)\n# Reutiliza a fun\u00e7\u00e3o de formata\u00e7\u00e3o do utils.py\ndf_plot['label_texto'] = (df_plot /\n                          # Exemplo se quisesse Bilh\u00f5es\n                          1000).apply(format_brl_bilhoes)\ndf_plot['label_texto'] = df_plot.apply(\n    lambda x: f\"{x:,.2f}\".replace(\",\", \"temp\").replace(\".\", \",\").replace(\"temp\", \".\"))\n\n\ndf_plot['cor_fundo'] = df_plot.apply(\n    lambda x: '#001B44' if x &gt; 0 else '#660000')\ndf_plot['M\u00e9trica'] = 'Resultado Fiscal'\n\n# --- Gr\u00e1fico ---\nbase_chart = alt.Chart(df_plot).encode(\n    x=alt.X('Ano de Exerc\u00edcio:O', axis=alt.Axis(\n        format='d', title='Ano de Exerc\u00edcio')),\n    tooltip=\n)\n\nline_e_points = base_chart.mark_line(color='black', point=True).encode(\n    y=alt.Y('Resultado (Milh\u00f5es):Q', axis=alt.Axis(\n        title='Resultado (R$ Milh\u00f5es)'))\n)\n\nlabel_background = base_chart.mark_rect(\n    height=22, width=60, cornerRadius=6, opacity=0.9\n).encode(\n    y=alt.Y('Resultado (Milh\u00f5es):Q'),\n    yOffset=alt.Y('label_offset:Q'),\n    color=alt.Color('cor_fundo:N', scale=None)\n)\n\ntext_labels = base_chart.mark_text(\n    align='center', baseline='middle', fontSize=12,\n    color='white', fontWeight='bold'\n).encode(\n    y=alt.Y('Resultado (Milh\u00f5es):Q'),\n    text=alt.Text('label_texto:N'),\n    yOffset=alt.Y('label_offset:Q')\n)\n\nfinal_chart = alt.layer(line_e_points, label_background, text_labels).properties(\n    title=f\"Resultado Fiscal ({anos_selecionados} - {anos_selecionados[1]})\",\n    height=500\n).interactive()\n\nst.altair_chart(final_chart, use_container_width=True)\n\n# --- Tabela detalhada ---\ndf_tabela = df_plot].set_index('Ano de Exerc\u00edcio')\ndf_tabela = df_tabela.sort_index(ascending=False)\n\nwith st.expander(\"Ver dados detalhados\"):\n    st.dataframe(\n        df_tabela.style\n        # Usa a fun\u00e7\u00e3o do utils.py\n       .map(style_resultado_fiscal, subset=)\n       .format(formatar_brl),  # Usa a fun\u00e7\u00e3o do utils.py\n        width='stretch'  # &lt;-- CORRIGIDO\n    )\n</code></pre> Clique aqui para ver a explica\u00e7\u00e3o para cada linha de c\u00f3digo <ul> <li>Fluxo da P\u00e1gina: A p\u00e1gina segue um fluxo l\u00f3gico claro: carregar dados, validar os dados, apresentar um filtro (<code>st.slider</code>), filtrar o DataFrame com base na sele\u00e7\u00e3o do utilizador, preparar os dados para visualiza\u00e7\u00e3o, construir e renderizar um gr\u00e1fico complexo, e finalmente, apresentar uma tabela detalhada dentro de um <code>st.expander</code>.</li> <li>Visualiza\u00e7\u00e3o Avan\u00e7ada: O gr\u00e1fico n\u00e3o \u00e9 uma simples linha. \u00c9 uma composi\u00e7\u00e3o de m\u00faltiplas camadas do Altair (<code>alt.layer</code>):</li> <li>line_e_points: A linha principal com pontos nos marcadores.</li> <li>label_background: Ret\u00e2ngulos coloridos que servem de fundo para os r\u00f3tulos de texto. A cor \u00e9 definida condicionalmente com base no valor ser positivo ou negativo.</li> <li>text_labels: O texto formatado do valor, posicionado sobre o fundo. Esta abordagem cria uma visualiza\u00e7\u00e3o rica em informa\u00e7\u00f5es e esteticamente agrad\u00e1vel.</li> <li>Tabela Estilizada: O uso de <code>st.expander</code> permite ocultar a tabela detalhada por defeito, mantendo a interface limpa. O encadeamento .<code>style.map(...).format(...)</code> demonstra o poder do Styler do Pandas: <code>.map()</code> aplica a fun\u00e7\u00e3o de estilo condicional (<code>style_resultado_fiscal</code>) para colorir o texto, enquanto <code>.format()</code> aplica a fun\u00e7\u00e3o de formata\u00e7\u00e3o de moeda (<code>formatar_brl</code>) para exibir os n\u00fameros de forma leg\u00edvel.</li> </ul>"},{"location":"dashboard/scripts_indicadores/#2-resultado-previdenciario-dashboardpagesresultado_previdenciariopy","title":"2. Resultado Previdenci\u00e1rio (dashboard/pages/resultado_previdenciario.py)","text":"<p>Este script segue um padr\u00e3o semelhante ao da p\u00e1gina fiscal, mas adaptado para um gr\u00e1fico de barras e dados previdenci\u00e1rios.</p> <p></p> <p></p> <pre><code># dashboard/pages/2_Resultado_Previdenciario.py\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\n\n# Importa as fun\u00e7\u00f5es \"gerais\" que criamos\nfrom data_loader import carregar_dados_previdenciario\nfrom utils import format_brl_bilhoes, formatar_brl, style_negativo\n\n# --- T\u00edtulo da P\u00e1gina ---\nst.title(\"Resultado Previdenci\u00e1rio\")\n\n# --- Carregar Dados ---\ndf_previdenciario = carregar_dados_previdenciario()\n\nif df_previdenciario.empty:\n    st.error(\"N\u00e3o foi poss\u00edvel carregar os dados. Verifique a mensagem de erro acima.\")\n    st.stop()\n\n# --- L\u00f3gica da P\u00e1gina (Filtros e Gr\u00e1ficos) ---\ntry:\n    ano_min = int(df_previdenciario['Ano'].min())\n    ano_max = int(df_previdenciario['Ano'].max())\nexcept ValueError:\n    st.error(\"N\u00e3o foi poss\u00edvel determinar o intervalo de anos. Verifique os dados.\")\n    st.stop()\n\nanos_selecionados = st.slider(\n    'Selecione o Per\u00edodo:',\n    min_value=ano_min,\n    max_value=ano_max,\n    value=(ano_min, ano_max),\n    key='slider_previdenciario'\n)\n\n# --- Filtrar Dados ---\nmask = (\n    (df_previdenciario['Ano'] &gt;= anos_selecionados) &amp;\n    (df_previdenciario['Ano'] &lt;= anos_selecionados[1])\n)\ndf_plot = df_previdenciario[mask].copy()\n\nif df_plot.empty:\n    st.warning(\"Nenhum dado dispon\u00edvel para o per\u00edodo selecionado.\")\n    st.stop()\n\n# --- Prepara\u00e7\u00e3o dos dados para o gr\u00e1fico ---\ndf_plot = df_plot['Valor'] / 1_000_000_000\n# Usa a fun\u00e7\u00e3o do utils.py\ndf_plot['Label_Valor'] = df_plot.apply(format_brl_bilhoes)\n\n# --- Gr\u00e1fico ---\nbars = alt.Chart(df_plot).mark_bar().encode(\n    x=alt.X('Ano:O', title='Ano'),\n    y=alt.Y('Valor_Bilhoes:Q', title='Valor (R$ Bilh\u00f5es)'),\n    color=alt.condition(\n        alt.datum.Valor_Bilhoes &gt; 0,\n        alt.value('#001B44'),\n        alt.value('#FFA07A')\n    ),\n    tooltip=\n)\n\ntext_labels = alt.Chart(df_plot).mark_text(\n    align='center', baseline='top', dy=5\n).encode(\n    x=alt.X('Ano:O'),\n    y=alt.Y('Valor_Bilhoes:Q'),\n    text=alt.Text('Label_Valor:N'),\n    color=alt.value('black')\n)\n\nchart = (bars + text_labels).properties(\n    title=f\"Resultado Previdenci\u00e1rio ({anos_selecionados} - {anos_selecionados[1]})\",\n    height=500\n).interactive()\n\nst.altair_chart(chart, use_container_width=True)\n\n# --- Tabela detalhada ---\nwith st.expander(\"Ver dados detalhados\"):\n    df_tabela = df_plot[['Ano', 'Valor']].copy()\n    df_tabela.rename(\n        columns={'Valor': 'Resultado Previdenciario Total'}, inplace=True)\n    df_tabela = df_tabela.sort_values(by='Ano', ascending=False)\n\n    st.dataframe(\n        df_tabela.style\n        # Usa a fun\u00e7\u00e3o do utils.py\n        # &lt;-- CORRIGIDO\n       .map(style_negativo, subset=)\n       .format({\n            'Resultado Previdenciario Total': formatar_brl  # Usa a fun\u00e7\u00e3o do utils.py\n        }),\n        hide_index=True,\n        width='stretch'  # &lt;-- CORRIGIDO\n    )\n</code></pre> Clique aqui para ver a explica\u00e7\u00e3o para cada linha de c\u00f3digo <ul> <li>Consist\u00eancia Arquitetural: Este script refor\u00e7a a validade da arquitetura. Ele segue o mesmo padr\u00e3o da p\u00e1gina fiscal (carregar, filtrar, visualizar, detalhar), demonstrando como o design \u00e9 facilmente replic\u00e1vel para novos indicadores.</li> <li>Gr\u00e1fico de Barras com R\u00f3tulos: O gr\u00e1fico \u00e9 constru\u00eddo sobrepondo uma camada de texto (text_labels) a uma camada de barras (bars). O operador + no Altair \u00e9 um atalho para alt.layer. A cor das barras \u00e9 definida dinamicamente usando alt.condition, uma forma poderosa de aplicar l\u00f3gica condicional diretamente na especifica\u00e7\u00e3o do gr\u00e1fico.</li> <li>Tabela Estilizada (Varia\u00e7\u00e3o): A tabela detalhada utiliza a fun\u00e7\u00e3o style_negativo para colorir os valores e formatar_brl para format\u00e1-los. A sintaxe .format({...}) permite aplicar diferentes fun\u00e7\u00f5es de formata\u00e7\u00e3o a colunas espec\u00edficas, oferecendo grande flexibilidade.</li> </ul>"},{"location":"projeto/arquitetura_tecnica/","title":"Arquitetura tecnica","text":""},{"location":"projeto/arquitetura_tecnica/#arquitetura-tecnica","title":"Arquitetura T\u00e9cnica","text":"<p>Esta \u00e9 uma p\u00e1gina nova e fundamental que substitui a gen\u00e9rica \"Ferramentas Utilizadas\". Ela serve para documentar as decis\u00f5es de engenharia que formam a espinha dorsal do projeto. A documenta\u00e7\u00e3o da estrutura de pastas \u00e9 particularmente importante, pois, como afirmado no guia de moderniza\u00e7\u00e3o, \"a estrutura de pastas de um projeto \u00e9 sua documenta\u00e7\u00e3o mais imediata\". Ela revela a filosofia de separa\u00e7\u00e3o de responsabilidades do projeto: dados brutos s\u00e3o isolados dos dados processados, a configura\u00e7\u00e3o (esquemas) \u00e9 separada da l\u00f3gica (scripts), e o c\u00f3digo da aplica\u00e7\u00e3o \u00e9 desacoplado do pipeline de dados.</p>"},{"location":"projeto/arquitetura_tecnica/#arquitetura-tecnica_1","title":"Arquitetura T\u00e9cnica","text":"<p>Este projeto foi constru\u00eddo sobre uma pilha de tecnologia moderna e uma arquitetura de pastas orientada a dom\u00ednio, projetada para clareza, manutenibilidade e escalabilidade.</p>"},{"location":"projeto/arquitetura_tecnica/#pilha-de-tecnologia-tech-stack","title":"Pilha de Tecnologia (Tech Stack)","text":"<p>A sele\u00e7\u00e3o de ferramentas foi guiada por princ\u00edpios de c\u00f3digo aberto, robustez e alinhamento com as melhores pr\u00e1ticas da ind\u00fastria de dados. \u2022   Python: A linguagem principal para todo o processamento de dados e para a aplica\u00e7\u00e3o web. \u2022   Poetry: Para gerenciamento de depend\u00eancias e pacotes. Garante ambientes de desenvolvimento e produ\u00e7\u00e3o determin\u00edsticos e reprodut\u00edveis. \u2022   Frictionless Data: Para definir \"contratos de dados\" que descrevem e validam a estrutura dos nossos conjuntos de dados, garantindo qualidade e interoperabilidade. \u2022   Streamlit: Para a constru\u00e7\u00e3o r\u00e1pida do dashboard interativo, permitindo que os usu\u00e1rios explorem os dados de forma intuitiva. \u2022   Docker: Para conteinerizar a aplica\u00e7\u00e3o, garantindo uma implanta\u00e7\u00e3o consistente, segura e eficiente em qualquer ambiente. \u2022   MkDocs + Material: Para a cria\u00e7\u00e3o deste site de documenta\u00e7\u00e3o.</p>"},{"location":"projeto/arquitetura_tecnica/#estrutura-de-diretorios-do-projeto","title":"Estrutura de Diret\u00f3rios do Projeto","text":"<p>A organiza\u00e7\u00e3o do reposit\u00f3rio segue um padr\u00e3o l\u00f3gico que separa claramente as responsabilidades de cada componente do projeto.</p> Diret\u00f3rio Prop\u00f3sito Justificativa de Design <code>/data-raw/</code> Armazena os arquivos CSV originais, baixados das fontes oficiais. Imutabilidade da Fonte: Garante que os dados originais nunca sejam modificados, permitindo reexecu\u00e7\u00e3o do pipeline. <code>/data/</code> Destino dos dados limpos, processados e validados, prontos para o dashboard. Separa\u00e7\u00e3o de Estados: Mant\u00e9m distin\u00e7\u00e3o clara entre o estado inicial (bruto) e final (processado) dos dados. <code>/scripts/</code> Cont\u00e9m todos os scripts Python do pipeline de ETL, incluindo o orquestrador <code>build.py</code>. Centraliza\u00e7\u00e3o da L\u00f3gica: Agrupa todo o c\u00f3digo de processamento em um \u00fanico local, facilitando manuten\u00e7\u00e3o e entendimento. <code>/schemas/</code> Armazena todos os \"contratos\" de dados do projeto, como esquemas e mapeamentos de transforma\u00e7\u00e3o. Configura\u00e7\u00e3o como C\u00f3digo: Trata defini\u00e7\u00f5es de dados como artefatos version\u00e1veis e desacoplados da l\u00f3gica do pipeline. <code>/dashboard/</code> Cont\u00e9m o c\u00f3digo da aplica\u00e7\u00e3o Streamlit (<code>app.py</code>) que constitui a interface do usu\u00e1rio final. Desacoplamento da UI: Isola a camada de apresenta\u00e7\u00e3o da de processamento, permitindo evolu\u00e7\u00e3o independente."},{"location":"projeto/ferramentas/","title":"Ferramentas utilizadas para a constru\u00e7\u00e3o do Painel","text":"<p>Em constru\u00e7\u00e3o</p>"},{"location":"projeto/motivacao/","title":"Objetivos e motiva\u00e7\u00f5es para o Painel Fiscal","text":"<p>A cria\u00e7\u00e3o do Painel Fiscal representa uma evolu\u00e7\u00e3o estrat\u00e9gica na forma como os dados fiscais do Estado s\u00e3o analisados, apresentados e consumidos. A principal motiva\u00e7\u00e3o para este projeto \u00e9 a transi\u00e7\u00e3o de um processo manual e fragmentado para uma solu\u00e7\u00e3o centralizada, automatizada e confi\u00e1vel, que busca organizar, padronizar e facilitar o acesso aos principais indicadores da situa\u00e7\u00e3o fiscal.</p>"},{"location":"projeto/motivacao/#o-desafio-as-limitacoes-do-processo-atual","title":"O Desafio: As Limita\u00e7\u00f5es do Processo Atual","text":"<p>Atualmente, a elabora\u00e7\u00e3o de relat\u00f3rios e an\u00e1lises sobre a situa\u00e7\u00e3o fiscal depende de um fluxo de trabalho, baseado na extra\u00e7\u00e3o descentralizada de dados de m\u00faltiplas fontes e na manipula\u00e7\u00e3o manual em planilhas (como o Excel).</p> <p>Este processo \u00e9 repetitivo, consome tempo e apresenta limita\u00e7\u00f5es:</p> <ul> <li> <p>Falta de Padroniza\u00e7\u00e3o: A aus\u00eancia de um padr\u00e3o visual resulta em gr\u00e1ficos e tabelas com estilos inconsistentes entre diferentes apresenta\u00e7\u00f5es, a depender de quem elabora.</p> </li> <li> <p>Risco \u00e0 Integridade dos Dados: A manipula\u00e7\u00e3o manual aumenta o risco de erros humanos, comprometendo a consist\u00eancia, a rastreabilidade e a seguran\u00e7a das informa\u00e7\u00f5es.</p> </li> <li> <p>Baixa Agilidade: O modelo limita a agilidade da equipe e dificulta a verifica\u00e7\u00e3o dos dados, cruciais para a tomada de decis\u00e3o.</p> </li> </ul>"},{"location":"projeto/motivacao/#a-solucao-um-painel-centralizado-confiavel-e-interativo","title":"A Solu\u00e7\u00e3o: Um Painel Centralizado, Confi\u00e1vel e Interativo","text":"<p>O desenvolvimento do painel aborda diretamente esses desafios, estabelecendo uma fonte \u00fanica da verdade para os indicadores fiscais. Os objetivos centrais do projeto s\u00e3o:</p> <ul> <li> <p>Centralizar e Estruturar: Criar um reposit\u00f3rio \u00fanico e interativo para todos os visuais, gr\u00e1ficos e tabelas recorrentemente utilizados, acess\u00edvel \u00e0 equipe t\u00e9cnica e institucional.</p> </li> <li> <p>Padronizar a Visualiza\u00e7\u00e3o: Implementar uma identidade visual e metodol\u00f3gica consistente para todos os indicadores, garantindo que as apresenta\u00e7\u00f5es sejam profissionais, claras, uniformes e sempre atualizadas.</p> </li> <li> <p>Garantir Integridade e Confiabilidade: Conectar o painel diretamente a fontes de dados j\u00e1 tratadas e normalizadas por scripts automatizados (pipeline de ETL). Isso minimiza a interven\u00e7\u00e3o manual, elimina o retrabalho e reduz drasticamente o risco de erros.</p> </li> <li> <p>Otimizar a Comunica\u00e7\u00e3o Estrat\u00e9gica: Fornecer uma ferramenta robusta para subsidiar apresenta\u00e7\u00f5es recorrentes e de alto impacto, como as realizadas para ag\u00eancias de classifica\u00e7\u00e3o de risco (Moody\u2019s, S&amp;P), Assembleia Legislativa (Fiscaliza), audi\u00eancias p\u00fablicas e outras reuni\u00f5es t\u00e9cnicas.</p> </li> </ul> <p>O uso de uma plataforma como o Streamlit permite ainda que o painel seja facilmente implantado e compartilhado via web, com filtros interativos e visualiza\u00e7\u00f5es din\u00e2micas que se adaptam \u00e0s necessidades de an\u00e1lise.</p>"},{"location":"projeto/motivacao/#visuais-e-indicadores-planejados","title":"Visuais e Indicadores Planejados","text":"<p>Inicialmente, o painel foi projetado para abrigar um conjunto essencial de indicadores fiscais que refletem a sa\u00fade financeira do Estado. A estrutura modular permite que novos visuais sejam adicionados ou ajustados conforme a necessidade.</p> <p>Os principais componentes visuais planejados s\u00e3o:</p> <ul> <li> <p>Resultados Gerais: Resultado Or\u00e7ament\u00e1rio, Resultado Prim\u00e1rio e Resultado Previdenci\u00e1rio.</p> </li> <li> <p>Indicadores Macro: D\u00edvida Consolidada L\u00edquida (DCL) e Receita Corrente L\u00edquida (RCL).</p> </li> <li> <p>Despesa Total de Pessoal (DTP)</p> </li> <li> <p>Detalhamentos da Despesa:</p> <ul> <li> <p>Obrigat\u00f3ria vs. Discricion\u00e1ria</p> </li> <li> <p>Poder Executivo vs. Outros Poderes</p> </li> <li> <p>Por Grupo de Despesa</p> </li> <li> <p>Por Fun\u00e7\u00e3o (Sa\u00fade, Educa\u00e7\u00e3o, Seguran\u00e7a, etc.)</p> </li> <li> <p>Por Unidade Or\u00e7ament\u00e1ria (UO)</p> </li> <li> <p>Investimentos: que transitam vs. n\u00e3o transitam no Tesouro</p> </li> </ul> </li> <li> <p>Detalhamento da Receita:</p> <ul> <li> <p>Por Natureza (Tribut\u00e1ria, Contribui\u00e7\u00e3o, Patrimonial, etc.)</p> </li> <li> <p>Vincula\u00e7\u00e3o da Receita do ICMS</p> </li> </ul> </li> <li> <p>Indicadores e Limites Constitucionais:</p> <ul> <li> <p>Manuten\u00e7\u00e3o e Desenvolvimento do Ensino (MDE)</p> </li> <li> <p>A\u00e7\u00f5es e Servi\u00e7os P\u00fablicos de Sa\u00fade (ASPS)</p> </li> <li> <p>FAPEMIG</p> </li> </ul> </li> <li> <p>Acompanhamento (PROPAG):</p> <ul> <li> <p>Limite de crescimento das despesas</p> </li> <li> <p>Investimentos Diretos e FEF por UO (Previs\u00e3o vs. Liquidado)</p> </li> </ul> </li> </ul> <p>Em suma, este painel transcende a fun\u00e7\u00e3o de uma simples ferramenta de visualiza\u00e7\u00e3o, estabelecendo-se como uma plataforma estrat\u00e9gica que promove efici\u00eancia, seguran\u00e7a e clareza na gest\u00e3o e comunica\u00e7\u00e3o dos dados fiscais do Estado.</p>"}]}